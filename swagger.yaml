openapi: 3.0.1

info:
  title: Pipool API
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local Docker development

tags:
- name: Authentication
  description: Users authentication and sign up
- name: User
- name: Services
  description: Services and products endpoints
- name: Categories

paths:
  /users/login:
    post:
      tags:
      - Authentication
      summary: Log in a new user
      requestBody:
        description: User object to create and log in
        content:
          application/json:
            schema:
              required:
              - email
              - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: User log in
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Authentication'
        403:
          description: Bad credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bad credentials"
      x-codegen-request-body-name: body

  /users/sign-up:
    post:
      tags:
      - Authentication
      summary: Create and log in a new user
      requestBody:
        description: User object to create and log in
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                name:
                  type: string
                  example: "Victor"
                surname:
                  type: string
                  example: "Falc√≥n"
                email:
                  type: string
                  example: "victor@proaas.com"
                password:
                  type: string
                  example: "any-password"
        required: true
      responses:
        200:
          description: User created and log in
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Authentication'
        422:
          description: Email already created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-codegen-request-body-name: body

  /users:
    get:
      summary: Get authenticated user information
      tags:
      - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /users/{id}:
    get:
      summary: Get user information by ID
      tags:
      - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Valid user id
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /users/locations:
    post:
      summary: Update last location of current logged user
      tags:
      - User
      security:
        - bearerAuth: []
      requestBody:
        description: User object to create and log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        201:
          description: Location updated succesfully
      x-codegen-request-body-name: body

  /services:
    get:
      summary: Get a list of current user services
      tags:
      - Services
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    allOf:
                      - items:
                          $ref: '#/components/schemas/Service'
                      - items:
                          type: object
                          properties:
                            createdAt:
                              type: string
                              example: "2020-10-28T18:34:33.000000Z"
                              description: Date
                      - items:
                          type: object
                          properties:
                            included:
                              type: object
                              properties:
                                products:
                                  type: array
                                  allOf:
                                    - items:
                                        type: object
                                        properties:
                                          id:
                                            type: integer
                                            example: 1
                                    - items:
                                        $ref: '#/components/schemas/Product'

  /services/search:
    get:
      summary: Get a list of current user services
      tags:
      - Services
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: false
          description: Category ID to filter services
        - in: path
          name: userId
          schema:
            type: integer
          required: false
          description: User ID to filter services
        - in: path
          name: query
          schema:
            type: text
          required: false
          description: Text to search
        - in: path
          name: latitude
          schema:
            type: integer
          required: false
          description: Latitude to search
        - in: path
          name: longitude
          schema:
            type: integer
          required: false
          description: Longitude to search
        - in: path
          name: meters
          schema:
            type: integer
          required: false
          description: Meters to draw a radius
      responses:
        200:
          description: List of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    allOf:
                      - items:
                          $ref: '#/components/schemas/Service'
                      - items:
                          type: object
                          properties:
                            createdAt:
                              type: string
                              example: "2020-10-28T18:34:33.000000Z"
                              description: Date
                      - items:
                          type: object
                          properties:
                            included:
                              type: object
                              properties:
                                products:
                                  type: array
                                  allOf:
                                    - items:
                                        type: object
                                        properties:
                                          id:
                                            type: integer
                                            example: 1
                                    - items:
                                        $ref: '#/components/schemas/Product'
                                user:
                                  $ref: '#/components/schemas/User'

    post:
      summary: Create new service
      tags:
        - Services
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Service to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        200:
          description: Created service
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                    - $ref: '#/components/schemas/Service'
                    - properties:
                        createdAt:
                          type: string
                          example: "2020-10-28T18:34:33.000000Z"
                          description: Date

      x-codegen-request-body-name: body

  /services/{id}:
    get:
      summary: Get a single service
      tags:
        - Services
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: List of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/Service'
                      - properties:
                          createdAt:
                            type: string
                            example: "2020-10-28T18:34:33.000000Z"
                            description: Date
                      - properties:
                          included:
                            type: object
                            properties:
                              products:
                                type: array
                                allOf:
                                  - items:
                                      type: object
                                      properties:
                                        id:
                                          type: integer
                                          example: 1
                                  - items:
                                      $ref: '#/components/schemas/Product'
      x-codegen-request-body-name: body

  /services/{id}/products:
    post:
      summary: Create new product for a service
      tags:
        - Services
      parameters:
          - in: path
            name: id
            schema:
              type: integer
            required: true
            description: Valid service id
      requestBody:
        description: Product to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Product created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - properties:
                          id:
                            type: integer
                            example: 1
                      - $ref: '#/components/schemas/Product'

  /services/{serviceId}/products/{productId}:
    delete:
      summary: Delete a product
      tags:
        - Services
      parameters:
          - in: path
            name: serviceId
            schema:
              type: integer
            required: true
            description: Valid service id
          - in: path
            name: productId
            schema:
              type: integer
            required: true
            description: Valid service id
      responses:
        204:
          description: Product deleted succesfully

    put:
      summary: Update product
      tags:
        - Services
      parameters:
          - in: path
            name: serviceId
            schema:
              type: integer
            required: true
            description: Valid service id
          - in: path
            name: productId
            schema:
              type: integer
            required: true
            description: Valid service id
      requestBody:
        description: Product to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Product updated succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - properties:
                          id:
                            type: integer
                            example: 1
                      - $ref: '#/components/schemas/Product'

  /categories:
    get:
      summary: Get the full category list
      tags:
        - Categories
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      required:
      - email
      - password
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Victor"
        surname:
          type: string
          example: "Falc√≥n"
        email:
          type: string
          example: "victor@proaas.com"
        createdAt:
          type: string
          example: "2020-10-28T18:34:33.000000Z"
          description: Creation date
        updatedAt:
          type: string
          example: "2020-10-28T18:34:33.000000Z"
          description: Update date

    Location:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
          example: 31.653381
        longitude:
          type: number
          example: 1.562536

    Service:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Clases de piano online
        categoryId:
          type: integer
          example: 1

    Product:
      type: object
      properties:
        name:
          type: string
          example: Desde casa
        description:
          type: string
          example: Clases de piano online de 1 hora por videollamada
        price:
          type: integer
          example: 2400
          description: Price in cents

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Limpieza
        image:
          type: string
          example: https://url.com/image.png

    Authentication:
      type: object
      properties:
        token:
          type: string
          description: Bearer token for authenticated endpoints
          example: 'any-random-token-to-authenticate-user'
        user:
          allOf:
            - $ref: '#/components/schemas/User'

    ValidationError:
      type: object
      properties:
        message:
          type: string
          description: Error description
          example: The given data was invalid
        errors:
          type: object
          properties:
            field:
              type: array
              description: Name of the field that are triggering the error
              items:
                type: string
                description: Error description
          description: List of fields failing
