openapi: 3.0.1

info:
  title: Pipool API
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local Docker development

tags:
- name: Authentication
  description: Users authentication and sign up
- name: User
  description: Users related endpoints

paths:
  /users/login:
    post:
      tags:
      - Authentication
      summary: Log in a new user
      requestBody:
        description: User object to create and log in
        content:
          application/json:
            schema:
              required:
              - email
              - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: User log in
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'

      x-codegen-request-body-name: body

  /users/sign-up:
    post:
      tags:
      - Authentication
      summary: Create and log in a new user
      requestBody:
        description: User object to create and log in
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    password:
                      type: string
                      example: hashed-password
        required: true
      responses:
        200:
          description: User created and log in
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Authentication'
        422:
          description: Email already created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-codegen-request-body-name: body

  /users:
    post:
      summary: Get authenticated user information
      tags:
      - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /users/{id}:
    post:
      summary: Get user information by ID
      tags:
      - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Valid user id
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /users/locations:
    post:
      summary: Update last location of current logged user
      tags:
      - User
      security:
        - bearerAuth: []
      requestBody:
        description: User object to create and log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        201:
          description: Location updated succesfully
      x-codegen-request-body-name: body

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      required:
      - email
      - password
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Victor"
        surname:
          type: string
          example: "Falc√≥n"
        email:
          type: string
          example: "victor@proaas.com"

    Location:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          type: number
          example: 31.653381
        longitude:
          type: number
          example: 1.562536

    Authentication:
      type: object
      properties:
        token:
          type: string
          description: Bearer token for authenticated endpoints
          example: 'any-randon-token-to-authenticate-user'
        included:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'

    ValidationError:
      type: object
      properties:
        message:
          type: string
          description: Error description
          example: The given data was invalid
        errors:
          type: object
          properties:
            field:
              type: array
              description: Name of the field that are triggering the error
              items:
                type: string
                description: Error description
          description: List of fields failing
